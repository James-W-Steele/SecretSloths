import random
from PIL import Image,ImageColor
import AccessoryData
# basis for encrypting and decrypting:
lettonum = {'`': 0, '~': 1, '1': 2, '!': 3, '2': 4, '@': 5, '3': 6, '#': 7, '4': 8, '$': 9, '5': 10, '%': 11, '6': 12, '^': 13, '7': 14, '&': 15, '8': 16, '*': 17, '9': 18, '(': 19, '0': 20, ')': 21, '-': 22, '_': 23, '=': 24, '+': 25, '[': 26, '{': 27, ']': 28, '}': 29, '\\': 30, '|': 31, ';': 32, ':': 33, "'": 34, '"': 35, ',': 36, '<': 37, '.': 38, '>': 39, '/': 40, '?': 41, 'q': 42, 'w': 43, 'e': 44, 'r': 45, 't': 46, 'y': 47, 'u': 48, 'i': 49, 'o': 50, 'p': 51, 'a': 52, 's': 53, 'd': 54, 'f': 55, 'g': 56, 'h': 57, 'j': 58, 'k': 59, 'l': 60, 'z': 61, 'x': 62, 'c': 63, 'v': 64, 'b': 65, 'n': 66, 'm': 67, 'Q': 68, 'W': 69, 'E': 70, 'R': 71, 'T': 72, 'Y': 73, 'U': 74, 'I': 75, 'O': 76, 'P': 77, 'A': 78, 'S': 79, 'D': 80, 'F': 81, 'G': 82, 'H': 83, 'J': 84, 'K': 85, 'L': 86, 'Z': 87, 'X': 88, 'C': 89, 'V': 90, 'B': 91, 'N': 92, 'M': 93, ' ': 94}
numtolet = {0: '`', 1: '~', 2: '1', 3: '!', 4: '2', 5: '@', 6: '3', 7: '#', 8: '4', 9: '$', 10: '5', 11: '%', 12: '6', 13: '^', 14: '7', 15: '&', 16: '8', 17: '*', 18: '9', 19: '(', 20: '0', 21: ')', 22: '-', 23: '_', 24: '=', 25: '+', 26: '[', 27: '{', 28: ']', 29: '}', 30: '\\', 31: '|', 32: ';', 33: ':', 34: "'", 35: '"', 36: ',', 37: '<', 38: '.', 39: '>', 40: '/', 41: '?', 42: 'q', 43: 'w', 44: 'e', 45: 'r', 46: 't', 47: 'y', 48: 'u', 49: 'i', 50: 'o', 51: 'p', 52: 'a', 53: 's', 54: 'd', 55: 'f', 56: 'g', 57: 'h', 58: 'j', 59: 'k', 60: 'l', 61: 'z', 62: 'x', 63: 'c', 64: 'v', 65: 'b', 66: 'n', 67: 'm', 68: 'Q', 69: 'W', 70: 'E', 71: 'R', 72: 'T', 73: 'Y', 74: 'U', 75: 'I', 76: 'O', 77: 'P', 78: 'A', 79: 'S', 80: 'D', 81: 'F', 82: 'G', 83: 'H', 84: 'J', 85: 'K', 86: 'L', 87: 'Z', 88: 'X', 89: 'C', 90: 'V', 91: 'B', 92: 'N', 93: 'M', 94: ' '}
sloth = [[78, 52, 46, 58.666666666666664, 8, 12], [78, 52, 46, 58.666666666666664, 9, 12], [78, 52, 46, 58.666666666666664, 10, 12], [78, 52, 46, 58.666666666666664, 11, 12], [78, 52, 46, 58.666666666666664, 12, 12], [78, 52, 46, 58.666666666666664, 13, 12], [78, 52, 46, 58.666666666666664, 14, 12], [78, 52, 46, 58.666666666666664, 15, 12], [78, 52, 46, 58.666666666666664, 16, 12], [78, 52, 46, 58.666666666666664, 7, 13], [141, 110, 99, 116.66666666666667, 8, 13], [141, 110, 99, 116.66666666666667, 9, 13], [141, 110, 99, 116.66666666666667, 10, 13], [141, 110, 99, 116.66666666666667, 11, 13], [141, 110, 99, 116.66666666666667, 12, 13], [141, 110, 99, 116.66666666666667, 13, 13], [141, 110, 99, 116.66666666666667, 14, 13], [141, 110, 99, 116.66666666666667, 15, 13], [141, 110, 99, 116.66666666666667, 16, 13], [78, 52, 46, 58.666666666666664, 17, 13], [78, 52, 46, 58.666666666666664, 6, 14], [141, 110, 99, 116.66666666666667, 7, 14], [141, 110, 99, 116.66666666666667, 8, 14], [141, 110, 99, 116.66666666666667, 9, 14], [141, 110, 99, 116.66666666666667, 10, 14], [141, 110, 99, 116.66666666666667, 11, 14], [141, 110, 99, 116.66666666666667, 12, 14], [141, 110, 99, 116.66666666666667, 13, 14], [141, 110, 99, 116.66666666666667, 14, 14], [141, 110, 99, 116.66666666666667, 15, 14], [141, 110, 99, 116.66666666666667, 16, 14], [141, 110, 99, 116.66666666666667, 17, 14], [78, 52, 46, 58.666666666666664, 18, 14], [78, 52, 46, 58.666666666666664, 5, 15], [1, 1, 1, 1.0, 6, 15], [1, 1, 1, 1.0, 7, 15], [141, 110, 99, 116.66666666666667, 8, 15], [141, 110, 99, 116.66666666666667, 9, 15], [141, 110, 99, 116.66666666666667, 10, 15], [1, 1, 1, 1.0, 11, 15], [1, 1, 1, 1.0, 12, 15], [141, 110, 99, 116.66666666666667, 13, 15], [141, 110, 99, 116.66666666666667, 14, 15], [141, 110, 99, 116.66666666666667, 15, 15], [141, 110, 99, 116.66666666666667, 16, 15], [1, 1, 1, 1.0, 17, 15], [1, 1, 1, 1.0, 18, 15], [78, 52, 46, 58.666666666666664, 19, 15], [78, 52, 46, 58.666666666666664, 5, 16], [1, 1, 1, 1.0, 6, 16], [1, 1, 1, 1.0, 7, 16], [141, 110, 99, 116.66666666666667, 8, 16], [141, 110, 99, 116.66666666666667, 9, 16], [141, 110, 99, 116.66666666666667, 10, 16], [1, 1, 1, 1.0, 11, 16], [1, 1, 1, 1.0, 12, 16], [141, 110, 99, 116.66666666666667, 13, 16], [141, 110, 99, 116.66666666666667, 14, 16], [141, 110, 99, 116.66666666666667, 15, 16], [141, 110, 99, 116.66666666666667, 16, 16], [1, 1, 1, 1.0, 17, 16], [1, 1, 1, 1.0, 18, 16], [78, 52, 46, 58.666666666666664, 19, 16], [78, 52, 46, 58.666666666666664, 5, 17], [78, 52, 46, 58.666666666666664, 6, 17], [78, 52, 46, 58.666666666666664, 7, 17], [141, 110, 99, 116.66666666666667, 8, 17], [141, 110, 99, 116.66666666666667, 9, 17], [141, 110, 99, 116.66666666666667, 10, 17], [1, 1, 1, 1.0, 11, 17], [1, 1, 1, 1.0, 12, 17], [141, 110, 99, 116.66666666666667, 13, 17], [141, 110, 99, 116.66666666666667, 14, 17], [141, 110, 99, 116.66666666666667, 15, 17], [141, 110, 99, 116.66666666666667, 16, 17], [78, 52, 46, 58.666666666666664, 17, 17], [78, 52, 46, 58.666666666666664, 18, 17], [78, 52, 46, 58.666666666666664, 19, 17], [78, 52, 46, 58.666666666666664, 5, 18], [78, 52, 46, 58.666666666666664, 6, 18], [78, 52, 46, 58.666666666666664, 7, 18], [141, 110, 99, 116.66666666666667, 8, 18], [141, 110, 99, 116.66666666666667, 9, 18], [141, 110, 99, 116.66666666666667, 10, 18], [141, 110, 99, 116.66666666666667, 11, 18], [141, 110, 99, 116.66666666666667, 12, 18], [141, 110, 99, 116.66666666666667, 13, 18], [141, 110, 99, 116.66666666666667, 14, 18], [141, 110, 99, 116.66666666666667, 15, 18], [141, 110, 99, 116.66666666666667, 16, 18], [78, 52, 46, 58.666666666666664, 17, 18], [78, 52, 46, 58.666666666666664, 18, 18], [78, 52, 46, 58.666666666666664, 19, 18], [78, 52, 46, 58.666666666666664, 5, 19], [141, 110, 99, 116.66666666666667, 6, 19], [141, 110, 99, 116.66666666666667, 7, 19], [141, 110, 99, 116.66666666666667, 8, 19], [1, 1, 1, 1.0, 9, 19], [141, 110, 99, 116.66666666666667, 10, 19], [141, 110, 99, 116.66666666666667, 11, 19], [141, 110, 99, 116.66666666666667, 12, 19], [141, 110, 99, 116.66666666666667, 13, 19], [1, 1, 1, 1.0, 14, 19], [141, 110, 99, 116.66666666666667, 15, 19], [141, 110, 99, 116.66666666666667, 16, 19], [141, 110, 99, 116.66666666666667, 17, 19], [141, 110, 99, 116.66666666666667, 18, 19], [78, 52, 46, 58.666666666666664, 19, 19], [78, 52, 46, 58.666666666666664, 5, 20], [141, 110, 99, 116.66666666666667, 6, 20], [141, 110, 99, 116.66666666666667, 7, 20], [141, 110, 99, 116.66666666666667, 8, 20], [141, 110, 99, 116.66666666666667, 9, 20], [1, 1, 1, 1.0, 10, 20], [1, 1, 1, 1.0, 11, 20], [1, 1, 1, 1.0, 12, 20], [1, 1, 1, 1.0, 13, 20], [141, 110, 99, 116.66666666666667, 14, 20], [141, 110, 99, 116.66666666666667, 15, 20], [141, 110, 99, 116.66666666666667, 16, 20], [141, 110, 99, 116.66666666666667, 17, 20], [141, 110, 99, 116.66666666666667, 18, 20], [78, 52, 46, 58.666666666666664, 19, 20], [78, 52, 46, 58.666666666666664, 5, 21], [78, 52, 46, 58.666666666666664, 6, 21], [141, 110, 99, 116.66666666666667, 7, 21], [141, 110, 99, 116.66666666666667, 8, 21], [141, 110, 99, 116.66666666666667, 9, 21], [141, 110, 99, 116.66666666666667, 10, 21], [141, 110, 99, 116.66666666666667, 11, 21], [141, 110, 99, 116.66666666666667, 12, 21], [141, 110, 99, 116.66666666666667, 13, 21], [141, 110, 99, 116.66666666666667, 14, 21], [141, 110, 99, 116.66666666666667, 15, 21], [141, 110, 99, 116.66666666666667, 16, 21], [141, 110, 99, 116.66666666666667, 17, 21], [78, 52, 46, 58.666666666666664, 18, 21], [78, 52, 46, 58.666666666666664, 19, 21], [78, 52, 46, 58.666666666666664, 20, 21], [78, 52, 46, 58.666666666666664, 5, 22], [78, 52, 46, 58.666666666666664, 6, 22], [78, 52, 46, 58.666666666666664, 7, 22], [141, 110, 99, 116.66666666666667, 8, 22], [141, 110, 99, 116.66666666666667, 9, 22], [141, 110, 99, 116.66666666666667, 10, 22], [141, 110, 99, 116.66666666666667, 11, 22], [141, 110, 99, 116.66666666666667, 12, 22], [141, 110, 99, 116.66666666666667, 13, 22], [141, 110, 99, 116.66666666666667, 14, 22], [141, 110, 99, 116.66666666666667, 15, 22], [141, 110, 99, 116.66666666666667, 16, 22], [78, 52, 46, 58.666666666666664, 17, 22], [78, 52, 46, 58.666666666666664, 18, 22], [78, 52, 46, 58.666666666666664, 19, 22], [78, 52, 46, 58.666666666666664, 20, 22], [78, 52, 46, 58.666666666666664, 21, 22], [78, 52, 46, 58.666666666666664, 6, 23], [78, 52, 46, 58.666666666666664, 7, 23], [78, 52, 46, 58.666666666666664, 8, 23], [78, 52, 46, 58.666666666666664, 9, 23], [78, 52, 46, 58.666666666666664, 10, 23], [78, 52, 46, 58.666666666666664, 11, 23], [78, 52, 46, 58.666666666666664, 12, 23], [78, 52, 46, 58.666666666666664, 13, 23], [78, 52, 46, 58.666666666666664, 14, 23], [78, 52, 46, 58.666666666666664, 15, 23], [78, 52, 46, 58.666666666666664, 16, 23], [78, 52, 46, 58.666666666666664, 17, 23], [78, 52, 46, 58.666666666666664, 18, 23], [78, 52, 46, 58.666666666666664, 19, 23], [78, 52, 46, 58.666666666666664, 20, 23], [78, 52, 46, 58.666666666666664, 21, 23], [78, 52, 46, 58.666666666666664, 22, 23]]

#print(AccessoryData.Data.get("MoneyHat"))
def encrypt_text(text):
    result = []
    for i in text:
        char_num = lettonum[i]
        first_num = random.randrange(1, 95)
        if first_num > char_num:
            second_num = random.randrange(1, 48)
            third_num = first_num - char_num
        else:
            second_num = random.randrange(48, 95)
            third_num = char_num - first_num
        result.append(first_num)
        result.append(second_num)
        result.append(third_num)
    return result


def convert_to_base_three(numslist):
    # You may notice that it's a slightly imperfect base three conversion. This is to confuse potential crackers.
    result = ''
    for i in numslist:
        base_num = 0
        second_num = 0
        third_num = 0
        fourth_num = 0
        for j in range(i):
            base_num += 1
            if base_num == 3:
                base_num = 0
                second_num += 1
            if second_num == 3:
                second_num = 0
                third_num += 1
            if third_num == 3:
                third_num = 0
                fourth_num += 1
        converted_num = str(base_num) + str(second_num) + str(third_num) + str(fourth_num)
        result += converted_num
    return result


def add_encrypt_to_image(image, encrypted_text, width):
    x = 0
    y = 0
    mode = 0
    reference_r = 0
    reference_g = 0
    reference_b = 0
    i = 0
    while i != len(encrypted_text):
        pixel = image[x, y]
        if mode == 0:
            reference_r = pixel[0]
            reference_g = pixel[1]
            reference_b = pixel[2]
            mode = 1
        else:
            mode = 0
            if pixel[0] == reference_r and pixel[2] == reference_b and pixel[1] == reference_g:
                num = encrypted_text[i]
                if num == "1":
                    image[x, y] = (reference_r+1, reference_g, reference_b)
                if num == "2":
                    image[x, y] = (reference_r, reference_g+1, reference_b)
                if num == "3":
                    image[x, y] = (reference_r, reference_g, reference_b+1)
                i = i + 1
        x += 1
        if x == width:
            x = 0
            y += 1

def add_accessory_to_image(image, accessory):
    
    for i in accessory:
        image[i[-2],i[-1]] = (i[0],i[1],i[2])
        
def make_image_viewable(image, image2, width, length):
    x = 0
    y = 0
    num = 0
    p=0
    l=0
    rang = width*length
    while num < rang:
        z = 0
        pixel = image[x,y]
        while z != 30:
            c = 0
            while c != 30:
                image2[p+z,l+c] = (pixel[0],pixel[1],pixel[2])
                c+=1
                
            z+=1
            
        x += 1
        p+=30
        if x == width:
            y += 1
            p=0
            l+=30
            x = 0
        num += 1
    
def generate_sloth(savelocation, number):
    image = Image.new(mode="RGB", size=(24, 24), color=(AccessoryData.generate_color()))
    image2 = Image.new(mode="RGB", size=(720, 720), color=(0,0,0))
    imagemanip = image.load()
    imagemanip2 = image2.load()
    width = image.size[0]
    height = image.size[1]
    add_accessory_to_image(imagemanip, sloth)
    z = random.randrange(1,3)
    y = random.randrange(1,3)
    add_accessory_to_image(imagemanip, AccessoryData.generate_hat())
    add_accessory_to_image(imagemanip, AccessoryData.generate_glasses())
    
    text = AccessoryData.generate_name()
    
    
    encrypted_text = encrypt_text(text)
    encrypted_text = convert_to_base_three(encrypted_text)
    add_encrypt_to_image(imagemanip, encrypted_text, width)
    make_image_viewable(imagemanip, imagemanip2, width, height)
    image.save(savelocation+text+" #"+number+".png")
    image2.save(savelocation+text+" #"+number+" sloth.png")

def extract_data_from_image(image, height, width):
    result = '' # this function reads the data in base 3 from the given image.
    zero_count = 0
    nums = ["1", "2", "3"]
    for y in range(height):
        for x in range(width):
            pixel = image[x, y]
            if x % 2 == 0:
                reference_r = pixel[0]
                reference_g = pixel[1]
                reference_b = pixel[2]
            if x % 2 != 0:
                count = 0
                if pixel[0] == reference_r:
                    count += 1
                else:
                    index = 0
                if pixel[1] == reference_g:
                    count += 1
                else:
                    index = 1
                if pixel[2] == reference_b:
                    count += 1
                else:
                    index = 2
                if count == 3:
                    zero_count += 1
                    result += "0"
                if count == 2:
                    result += nums[index]
                    zero_count = 0
    while len(result[:-zero_count]) % 12 != 0:
        zero_count -= 1
    return result[:-zero_count]


def convert_to_decimal(data): # takes in a string of numbers to convert to decimal from base 3.
    result = []
    x = 4
    while x != len(data)+4:
        chars = data[x-4:x]
        number = 1 * int(chars[0])
        number += 3 * int(chars[1])
        number += 9 * int(chars[2])
        number += 27 * int(chars[3])
        result.append(number)
        x += 4
    return result


def decrypt_text(data):
    x = 3
    result = ''
    while x != (len(data)+3):
        letternums = data[x-3:x]
        if letternums[1] < 48:
            result += numtolet[letternums[0] - letternums[2]]
        else:
            result += numtolet[letternums[0] + letternums[2]]
        x += 3
    return result


def decrypt_image(imagefile):
    image = Image.open(imagefile)
    imagemanip = image.load()
    height = image.size[0]
    width = image.size[1]
    data = extract_data_from_image(imagemanip, height, width)
    data = convert_to_decimal(data)
    print(decrypt_text(data))

o = input("Here:")
x = 0
while x!= 100:
    #print(x)
    generate_sloth(o,str(x))
    x+=1

#decrypt_image(input("Put directory of image here:"))